<?php

class WishAccountRelations extends WishModel
{

    const ACCOUNT_RELATION_ENABLE_STATUS = 1;
    const ACCOUNT_RELATION_DISABLE_STATUS = 0;
    const ACCOUNT_RELATION_EXPIRED_STATUS = 2;

    public function tableName()
    {
        return 'ueb_wish_account_relations';
    }
   
    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }



    public function saveInfo($data)
    {
        if (isset($data['id'])) {
            $info = $this->findByPk($data['id']);
            if (!$info) {
                throw new \Exception(Yii::t('wish', 'Relation info can not be found'));
            }
            $success = $this->getDbConnection()->createCommand()->update(
                $this->tableName(),
                $data,
                'id=:id',
                array(':id'=> $data['id'])
            );
            if (!$success) {
                throw new \Exception(Yii::t('wish', 'Can not update info'));
            }
        } else {
            $success = $this->getDbConnection()->createCommand()->insert(
                $this->tableName(),
                $data
            );
            if (!$success) {
                throw new \Exception(Yii::t('wish', 'Can not save info'));
            }
            return $this->getDbConnection()->getLastInsertID();
        }
    }

    public function findRelationsByDepartmentId($id)
    {
        $queryBuilder = $this->getDbConnection()->createCommand()
            ->from($this->tableName())
            ->select('id, seller_id, account_id, department_id')
            ->where('department_id=:departmentId', array(':departmentId'=> $id));
        $queryBuilder = $this->withExpiredCondition($queryBuilder);


        return $queryBuilder->queryAll();
    }

    private function withExpiredCondition($queryBuilder)
    {
        $dateTime = new \DateTime();

        $queryBuilder->andWhere(
            'expired_at > :expiredAt',
            array(':expiredAt'=>         $dateTime->format('Y-m-d H:i:s') )
        );

        return $queryBuilder;
    }

    public function findRelationsBySellerId($id)
    {
        $queryBuilder = $this->getDbConnection()->createCommand()
            ->from($this->tableName(). ' AS ra')
            ->select('ra.id, ra.account_id, ra.seller_id, ra.department_id, a.account, a.account_name')
            ->join(WishAccount::model()->tableName(). ' AS a', 'ra.account_id = a.id')
            ->where('seller_id = :sellerId', array(':sellerId'=> $id));
        $queryBuilder = $this->withExpiredCondition($queryBuilder);
        return $queryBuilder->queryAll();

    }


    public function findRelatedSellerByAccountId(array $accountId)
    {
        $queryBuilder = $this->getDbConnection()->createCommand()
            ->from($this->tableName(). ' AS ra')
            ->select('ra.id, ra.account_id, ra.seller_id, ra.department_id, a.account, a.account_name')
            ->join(WishAccount::model()->tableName(). ' AS a', 'ra.account_id = a.id')
            ->where( array('IN', 'account_id', $accountId));
        $queryBuilder = $this->withExpiredCondition($queryBuilder);
        return $queryBuilder->queryAll();
    }


    public function search($model = null, $sort = array(), $with = array(), $criteria = null)
    {
        $sort = new CSort();
        $sort->attributes = array(
            'defaultOrder' => 'id',
            'defaultOrderDirection' => 'DESC'
        );

        $criteria = new CDbCriteria();
        $accountList = WishAccount::model()->getIdNamePairs();
        $departmentList = Department::model()->getMarketsDepartmentInfo();
        $userList = User::model()->getAllUserName();
        $dataProvider = parent::search($model, $sort, $with, $criteria); // TODO: Change the autogenerated stub

        foreach($dataProvider->data as $value) {
            $value->account_id = $accountList[$value->account_id];
            $value->department_id = $departmentList[$value->department_id];
            $value->seller_id = $userList[$value->seller_id];
            $value->status = $this->getExpiredStatus($value);
        }

        return $dataProvider;
    }

    public function getExpiredStatus($value)
    {
        $expiredTime = \DateTime::createFromFormat('Y-m-d H:i:s', $value->expired_at);

        $dateTime = new \DateTime();
        $dateInterval = $expiredTime->diff($dateTime);
        if (!$dateInterval->invert) {
            return Yii::t('wish', 'Expired');

        }
        return Yii::t('wish', 'Active');
    }

    public function filterOptions()
    {
        return array(
            array(
                'name' => 'account_id',
                'type' => 'dropDownList',
               // 'label' => 'account_id',
                'search' => '=',
                'data'=> WishAccount::model()->getIdNamePairs()
            ),
            array(
                'name' => 'department_id',
                'type' => 'dropDownList',
                //'label' => 'department_id',
                'search' => '=',
                'data'=> Department::model()->getDepartmentByKeywords('wish')
            ),
        );
    }

    public function attributeLabels() {
        return array(
            'department_id'     => Yii::t('system', 'Department'),
            'account_id'              => Yii::t('wish', 'Account'),
            'account_name'   => Yii::t('wish', 'Account'),
            'department_name'     => Yii::t('system', 'Department'),
            'seller_name'     => Yii::t('wish', 'Seller'),
            'status'     => Yii::t('wish', 'Status'),
            'created_at'     => Yii::t('wish', 'Created At'),
            'expired_at'     => Yii::t('wish', 'Expired At'),
        );
    }
}